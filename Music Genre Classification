import librosa
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, confusion_matrix

# Define the path to your dataset directory
dataset_path = '/path/to/your/dataset'

# Define the number of classes (genres)
num_classes = 10

# Define the number of samples to load for each class
samples_per_class = 100

# Define the size of the mel-spectrogram
mel_spectrogram_size = (128, 128)

# Create empty lists to store the data and labels
X = []
y = []

# Iterate over each class (genre)
for i in range(num_classes):
  # Get the directory for the current class
  class_dir = os.path.join(dataset_path, str(i))

  # Load the first 'samples_per_class' files from the directory
  for j in range(samples_per_class):
    # Get the path to the current file
    file_path = os.path.join(class_dir, f'{j}.wav')

    # Load the audio file
    audio, sr = librosa.load(file_path)

    # Extract the mel-spectrogram
    mel_spectrogram = librosa.feature.melspectrogram(y=audio, sr=sr, n_mels=128)

    # Convert the mel-spectrogram to decibel scale
    mel_spectrogram = librosa.power_to_db(mel_spectrogram)

    # Resize the mel-spectrogram to the desired size
    mel_spectrogram = librosa.util.fix_length(mel_spectrogram, size=mel_spectrogram_size[0])

    # Append the mel-spectrogram to the data list
    X.append(mel_spectrogram)

    # Append the class label to the label list
    y.append(i)

# Convert the data and labels to NumPy arrays
X = np.array(X)
y = np.array(y)

# Reshape the data to fit the CNN input shape
X = X.reshape(X.shape[0], X.shape[1], X.shape[2], 1)

# Encode the labels using LabelEncoder
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create the CNN model
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(X_train.shape[1], X_train.shape[2], 1)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

# Compile the model
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32)

# Evaluate the model on the test set
loss, accuracy = model.evaluate(X_test, y_test, verbose=0)
print(f'Test Loss: {loss:.4f}')
print(f'Test Accuracy: {accuracy:.4f}')

# Make predictions on the test set
y_pred = np.argmax(model.predict(X_test), axis=1)

# Calculate the accuracy and confusion matrix
accuracy = accuracy_score(y_test, y_pred)
confusion_mat = confusion_matrix(y_test, y_pred)

print(f'Accuracy: {accuracy:.4f}')
print('Confusion Matrix:')
print(confusion_mat)
